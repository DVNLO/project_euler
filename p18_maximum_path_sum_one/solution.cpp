#include <bits/stdc++.h>
//      0  1  2
// 0  : 75
// 1  : 95 64
// 2  : 17 47 82
// 3  : 18 35 87 10
// 4  : 20 04 82 47 65
// 5  : 19 01 23 75 03 34
// 6  : 88 02 77 73 07 63 67
// 7  : 99 65 04 28 06 16 70 92
// 8  : 41 41 26 56 83 40 80 70 33
// 9  : 41 48 72 33 47 32 37 16 94 29
// 10 : 53 71 44 65 25 43 91 52 97 51 14
// 11 : 70 11 33 28 77 73 17 78 39 68 17 57
// 12 : 91 71 52 38 17 14 91 43 58 50 27 29 48
// 13 : 63 66 04 68 89 53 67 30 73 16 69 87 40 31
// 14 : 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

// assumes vals contains at least one value
long max_path_cost(std::vector<std::vector<long>> const &vals)
{
    auto const n{vals.size()};
    std::vector<long> prev_max_vals(n, 0);
    std::vector<long> cur_max_vals(n, 0);
    cur_max_vals[0] = vals[0][0];
    for (size_t r{1}; r < n; ++r)
    {
        std::swap(prev_max_vals, cur_max_vals);
        cur_max_vals[0] = prev_max_vals[0] + vals[r][0];
        for (size_t c{1}; c < r; ++c)
        {
            long const left_val{prev_max_vals[c - 1]};
            long const right_val{prev_max_vals[c]};
            cur_max_vals[c] = std::max(left_val, right_val) + vals[r][c];
        }
        cur_max_vals[r] = prev_max_vals[r - 1] + vals[r][r];
    }
    long max_val{0};
    for (long r{0}; r < n; ++r)
    {
        max_val = std::max(max_val, cur_max_vals[r]);
    }
    return max_val;
}

/*
75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
*/

int main()
{
    std::vector<std::vector<long>> vals{
        {75},
        {95, 64},
        {17, 47, 82},
        {18, 35, 87, 10},
        {20, 4, 82, 47, 65},
        {19, 1, 23, 75, 3, 34},
        {88, 2, 77, 73, 7, 63, 67},
        {99, 65, 4, 28, 6, 16, 70, 92},
        {41, 41, 26, 56, 83, 40, 80, 70, 33},
        {41, 48, 72, 33, 47, 32, 37, 16, 94, 29},
        {53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14},
        {70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57},
        {91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48},
        {63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31},
        {4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23}};

    std::cout << max_path_cost(vals);
}